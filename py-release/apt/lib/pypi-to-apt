#!/usr/bin/env python3
"""
PyPI to Debian Package Generator

This script generates a Debian package from a PyPI package. It creates a temporary
directory, sets up a virtual environment, installs the package, and then uses the
package metadata to generate a Debian package.

Usage:
    package-managers/debina/pypi-to-apt <package_name>

Example:
    package-managers/debian/pypi-to-apt nanodoc
"""

import argparse
import hashlib
import os
import re
import shutil
import subprocess
import sys
import tempfile
import urllib.request
from pathlib import Path
from typing import Dict, Optional, List

import jinja2

# Jinja2 template for the Debian control file
CONTROL_TEMPLATE = """Package: python3-{{ package_name }}
Version: {{ version }}-1
Architecture: all
Maintainer: {{ author }} <maintainer@example.com>
Section: python
Priority: optional
Depends: python3 (>= 3.7)
Homepage: {{ homepage }}
Description: {{ description }}
 {{ long_description }}

"""

# Jinja2 template for the postinst script
POSTINST_TEMPLATE = """#!/bin/sh
set -e

# Create a wrapper script
cat > /usr/bin/{{ package_name }} << 'EOF'
#!/bin/bash
python3 -m {{ package_name }} "$@"
EOF
chmod 755 /usr/bin/{{ package_name }}

exit 0
"""


def create_temp_dir() -> str:
    """Create a temporary directory and return its path."""
    return tempfile.mkdtemp()


def create_venv(temp_dir: str) -> str:
    """Create a virtual environment in the temporary directory."""
    venv_path = os.path.join(temp_dir, ".venv")
    subprocess.run([sys.executable, "-m", "venv", venv_path], check=True)
    return venv_path


def install_package(venv_path: str, package_name: str) -> None:
    """Install the package in the virtual environment."""
    pip_path = os.path.join(venv_path, "bin", "pip")
    subprocess.run([pip_path, "install", package_name], check=True)


def get_package_metadata(venv_path: str, package_name: str) -> Dict[str, str]:
    """Get the package metadata using the about-py-package script."""
    python_path = os.path.join(venv_path, "bin", "python")
    script_dir = Path(__file__).parent
    about_py_package = str(script_dir.parent / "common" / "about-py-package")

    metadata = {}

    # Get name
    result = subprocess.run(
        [python_path, about_py_package, "--name", package_name],
        capture_output=True,
        text=True,
        check=True,
    )
    metadata["name"] = result.stdout.strip()

    # Get version
    result = subprocess.run(
        [python_path, about_py_package, "--version", package_name],
        capture_output=True,
        text=True,
        check=True,
    )
    metadata["version"] = result.stdout.strip()

    # Get summary
    result = subprocess.run(
        [python_path, about_py_package, "--summary", package_name],
        capture_output=True,
        text=True,
        check=True,
    )
    metadata["summary"] = result.stdout.strip()

    # Get author
    result = subprocess.run(
        [python_path, about_py_package, "--author", package_name],
        capture_output=True,
        text=True,
        check=True,
    )
    metadata["author"] = result.stdout.strip()

    # Get home page
    result = subprocess.run(
        [python_path, about_py_package, "--home-page", package_name],
        capture_output=True,
        text=True,
        check=True,
    )
    metadata["home_page"] = result.stdout.strip()

    # Get license
    result = subprocess.run(
        [python_path, about_py_package, "--license", package_name],
        capture_output=True,
        text=True,
        check=True,
    )
    metadata["license"] = result.stdout.strip() or "Unknown"

    return metadata


def get_license_from_file(license_file_path: str = "../common/LICENSE") -> str:
    """Get the license type from the LICENSE file."""
    try:
        with open(license_file_path, "r") as f:
            content = f.read()
            # Extract license type from the first few lines
            match = re.search(r"(MIT|Apache|GPL|BSD|MPL|LGPL|EPL|CDDL|CPL)\s+License", content, re.IGNORECASE)
            if match:
                return match.group(1)
    except Exception:
        pass
    return "MIT"  # Default to MIT if not found or error


def format_date() -> str:
    """Format the current date in Debian changelog format."""
    from datetime import datetime
    import locale
    import time

    # Save the current locale
    old_locale = locale.setlocale(locale.LC_TIME)

    try:
        # Set locale to C for standard format
        locale.setlocale(locale.LC_TIME, 'C')

        # Format the date according to Debian policy
        now = datetime.now()
        date_str = now.strftime('%a, %d %b %Y %H:%M:%S %z')

        # If timezone is missing, add +0000
        if not date_str.endswith(' +0000') and not '+' in date_str[-6:] and not '-' in date_str[-6:]:
            date_str += ' +0000'

        return date_str
    finally:
        # Restore the original locale
        locale.setlocale(locale.LC_TIME, old_locale)


def clean_old_package_dirs(output_dir: str, package_name: str, current_version: str) -> None:
    """
    Clean up old package directories for the same package.
    Keeps the current version and removes all others.
    """
    # Find all directories matching the package name pattern
    package_dirs = []
    pattern = re.compile(f"^{re.escape(package_name)}-[0-9.]+$")
    
    for item in os.listdir(output_dir):
        if pattern.match(item) and os.path.isdir(os.path.join(output_dir, item)):
            if item != f"{package_name}-{current_version}":  # Skip current version
                package_dirs.append(item)
    
    # Remove old package directories
    for old_dir in package_dirs:
        old_dir_path = os.path.join(output_dir, old_dir)
        print(f"Removing old package directory: {old_dir}")
        shutil.rmtree(old_dir_path)


def build_debian_package(output_dir: str, metadata: Dict[str, str], venv_path: str) -> str:
    """Build a Debian package from the installed package."""
    package_name = metadata["name"]
    version = metadata["version"]
    
    # Clean up old package directories
    clean_old_package_dirs(output_dir, package_name, version)

    # Clean up any existing package directory for current version
    package_dir = os.path.join(output_dir, f"{package_name}-{version}")
    if os.path.exists(package_dir):
        shutil.rmtree(package_dir)

    # Create the package directory structure
    os.makedirs(package_dir, exist_ok=True)

    # Create the DEBIAN directory
    debian_dir = os.path.join(package_dir, "DEBIAN")
    os.makedirs(debian_dir, exist_ok=True)

    # Create the usr/lib/python3/dist-packages directory
    dist_packages_dir = os.path.join(package_dir, "usr", "lib", "python3", "dist-packages")
    os.makedirs(dist_packages_dir, exist_ok=True)

    # Create the usr/bin directory
    bin_dir = os.path.join(package_dir, "usr", "bin")
    os.makedirs(bin_dir, exist_ok=True)

    # Create templates
    control_template = jinja2.Template(CONTROL_TEMPLATE)
    postinst_template = jinja2.Template(POSTINST_TEMPLATE)

    # Format the long description (wrap at 80 characters)
    import textwrap
    long_description = textwrap.fill(metadata["summary"], width=80)
    long_description = long_description.replace("\n", "\n ")

    # Generate the control file
    control_content = control_template.render(
        package_name=package_name,
        version=version,
        author=metadata["author"],
        homepage=metadata["home_page"],
        description=metadata["summary"],
        long_description=long_description,
    )
    with open(os.path.join(debian_dir, "control"), "w") as f:
        f.write(control_content)

    # Generate the postinst script
    postinst_content = postinst_template.render(package_name=package_name)
    postinst_path = os.path.join(debian_dir, "postinst")
    with open(postinst_path, "w") as f:
        f.write(postinst_content)
    # Make the postinst script executable
    os.chmod(postinst_path, 0o755)

    # Copy the package files from the virtual environment to the package directory
    # Find the Python version dynamically
    python_path = os.path.join(venv_path, "bin", "python")
    result = subprocess.run(
        [python_path, "-c", "import sys; print(f'python{sys.version_info.major}.{sys.version_info.minor}')"],
        capture_output=True,
        text=True,
        check=True,
    )
    python_version = result.stdout.strip()

    # Use the detected Python version
    site_packages_dir = os.path.join(venv_path, "lib", python_version, "site-packages")

    # Debug output
    print(f"Looking for package in: {site_packages_dir}")
    if os.path.exists(site_packages_dir):
        print(f"Contents of site-packages: {os.listdir(site_packages_dir)}")
    else:
        print(f"Warning: {site_packages_dir} does not exist")

    package_source_dir = os.path.join(site_packages_dir, package_name)
    if os.path.exists(package_source_dir):
        # Copy the package directory
        shutil.copytree(package_source_dir, os.path.join(dist_packages_dir, package_name))
        print(f"Copied package from {package_source_dir} to {os.path.join(dist_packages_dir, package_name)}")

        # Copy any .dist-info directory
        dist_info_dirs = [d for d in os.listdir(site_packages_dir) if d.startswith(f"{package_name}-") and d.endswith(".dist-info")]
        for dist_info_dir in dist_info_dirs:
            shutil.copytree(os.path.join(site_packages_dir, dist_info_dir), os.path.join(dist_packages_dir, dist_info_dir))
            print(f"Copied {dist_info_dir} to {os.path.join(dist_packages_dir, dist_info_dir)}")
    else:
        print(f"Warning: Package source directory {package_source_dir} not found")
        # Try to find the package in a different location
        print(f"Searching for {package_name} in {site_packages_dir}...")
        for item in os.listdir(site_packages_dir):
            if item.lower() == package_name.lower() or item.startswith(f"{package_name.lower()}-"):
                print(f"Found potential match: {item}")

    # Create a wrapper script in usr/bin
    wrapper_script = f"""#!/bin/bash
python3 -m {package_name} "$@"
"""
    wrapper_path = os.path.join(bin_dir, package_name)
    with open(wrapper_path, "w") as f:
        f.write(wrapper_script)
    os.chmod(wrapper_path, 0o755)

    # Build the Debian package
    deb_file = os.path.join(output_dir, f"python3-{package_name}_{version}-1_all.deb")
    subprocess.run(["dpkg-deb", "--build", package_dir, deb_file], check=True)

    return deb_file


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Generate a Debian package from a PyPI package")
    parser.add_argument("package_name", help="The name of the PyPI package")
    parser.add_argument("--output-dir", help="The directory to output the Debian package", default="/tmp/debian-build")
    args = parser.parse_args()

    package_name = args.package_name
    output_dir = os.path.abspath(args.output_dir)

    # Create a temporary directory
    temp_dir = create_temp_dir()

    try:
        # Create a virtual environment
        venv_path = create_venv(temp_dir)

        # Install the package
        install_package(venv_path, package_name)

        # Get the package metadata
        metadata = get_package_metadata(venv_path, package_name)

        # Create the output directory
        os.makedirs(output_dir, exist_ok=True)

        # Build the Debian package
        deb_file = build_debian_package(output_dir, metadata, venv_path)

        print(f"Debian package created: {deb_file}")
        print("\nTo install the package:")
        print(f"  sudo apt install {deb_file}")

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)


if __name__ == "__main__":
    main()
