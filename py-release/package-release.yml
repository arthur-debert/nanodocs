name: Package Release

on:
  # Trigger after a GitHub Release is published
  release:
    types: [published]
  # Add manual trigger option
  workflow_dispatch:
    inputs:
      targets:
        description: "Comma-separated list of targets (pypi,brew,apt,github)"
        required: false
        type: string
        default: "pypi,brew,apt,github"
      force_update:
        description: "Force update even if no changes detected"
        required: false
        type: boolean
        default: false
      package_name:
        description: "Package name (default: project name from pyproject.toml)"
        required: false
        type: string
      steps:
        description: "Steps to run for package managers (build,verify,commit)"
        required: false
        type: string
        default: "build,verify,commit"
      release_notes:
        description: "Custom release notes content"

permissions:
  contents: write

jobs:
  determine_targets:
    runs-on: ubuntu-latest
    outputs:
      publish_pypi: ${{ steps.set_targets.outputs.publish_pypi }}
      publish_brew: ${{ steps.set_targets.outputs.publish_brew }}
      publish_apt: ${{ steps.set_targets.outputs.publish_apt }}
      publish_github: ${{ steps.set_targets.outputs.publish_github }}
      version: ${{ steps.determine_version.outputs.release_version }}
      package_name: ${{ steps.determine_package.outputs.package_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.11"
          cache-key-prefix: "release-env"

      - name: Determine version
        id: determine_version
        shell: bash
        run: |
          release_version=$(poetry version -s)
          echo "Using version from pyproject.toml: $release_version"
          echo "release_version=$release_version" >> $GITHUB_OUTPUT

      - name: Determine package name
        id: determine_package
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.package_name }}" ]]; then
            package_name="${{ github.event.inputs.package_name }}"
          else
            package_name=$(poetry version | cut -d' ' -f1)
          fi
          echo "package_name=$package_name" >> $GITHUB_OUTPUT

      - name: Set targets
        id: set_targets
        shell: bash
        run: |
          # Default to all targets if triggered by release
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "publish_pypi=true" >> $GITHUB_OUTPUT
            echo "publish_brew=true" >> $GITHUB_OUTPUT
            echo "publish_apt=true" >> $GITHUB_OUTPUT
            echo "publish_github=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse input targets
          TARGETS="${{ github.event.inputs.targets }}"
          if [[ -z "$TARGETS" ]]; then
            TARGETS="pypi,brew,apt,github"
          fi
          
          # Set individual target flags
          if [[ "$TARGETS" == *"pypi"* ]]; then
            echo "publish_pypi=true" >> $GITHUB_OUTPUT
          else
            echo "publish_pypi=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$TARGETS" == *"brew"* ]]; then
            echo "publish_brew=true" >> $GITHUB_OUTPUT
          else
            echo "publish_brew=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$TARGETS" == *"apt"* ]]; then
            echo "publish_apt=true" >> $GITHUB_OUTPUT
          else
            echo "publish_apt=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$TARGETS" == *"github"* ]]; then
            echo "publish_github=true" >> $GITHUB_OUTPUT
          else
            echo "publish_github=false" >> $GITHUB_OUTPUT
          fi

  pypi_publish:
    needs: determine_targets
    if: ${{ needs.determine_targets.outputs.publish_pypi == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.11"
          cache-key-prefix: "pypi-env"

      - name: Build
        shell: bash
        run: |
          poetry build

      - name: Publish
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "Publishing version ${{ needs.determine_targets.outputs.version }} to PyPI..."
          poetry run twine upload --repository pypi dist/*

      - name: Create GitHub Release
        if: ${{ github.event_name != 'release' }}
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ needs.determine_targets.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: ${{ inputs.release_notes == '' }}
          body: ${{ inputs.release_notes }}
          prerelease: false
          name: "Release v${{ needs.determine_targets.outputs.version }}"

  homebrew_update:
    needs: [determine_targets, pypi_publish]
    if: ${{ needs.determine_targets.outputs.publish_brew == 'true' && (always() || needs.pypi_publish.result == 'success' || needs.pypi_publish.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.11"
          cache-key-prefix: "brew-env"

      - name: Parse steps
        id: parse_steps
        shell: bash
        run: |
          STEPS="${{ github.event.inputs.steps }}"
          if [[ -z "$STEPS" ]]; then
            STEPS="build,verify,commit"
          fi
          
          if [[ "$STEPS" == *"build"* ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
          else
            echo "run_build=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$STEPS" == *"verify"* ]]; then
            echo "run_verify=true" >> $GITHUB_OUTPUT
          else
            echo "run_verify=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$STEPS" == *"commit"* ]]; then
            echo "run_commit=true" >> $GITHUB_OUTPUT
          else
            echo "run_commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Homebrew formula
        if: ${{ steps.parse_steps.outputs.run_build == 'true' }}
        shell: bash
        run: |
          # Install the package from PyPI
          pip install ${{ needs.determine_targets.outputs.package_name }}==${{ needs.determine_targets.outputs.version }}
          
          # Generate the formula
          python package-managers/brew/pypi-to-brew ${{ needs.determine_targets.outputs.package_name }}
          
          # Show the generated formula
          cat package-managers/brew/Formula/${{ needs.determine_targets.outputs.package_name }}.rb

      - name: Verify Homebrew formula
        if: ${{ steps.parse_steps.outputs.run_verify == 'true' }}
        shell: bash
        run: |
          # Test the formula
          bash package-managers/brew/test-brew-formula.sh ${{ needs.determine_targets.outputs.package_name }}

      - name: Commit Homebrew formula
        if: ${{ steps.parse_steps.outputs.run_commit == 'true' }}
        shell: bash
        run: |
          # Check if there are changes
          if ! git diff --quiet package-managers/brew/Formula/${{ needs.determine_targets.outputs.package_name }}.rb; then
            # Commit the changes
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add package-managers/brew/Formula/${{ needs.determine_targets.outputs.package_name }}.rb
            git commit -m "Update Homebrew formula for ${{ needs.determine_targets.outputs.package_name }} to version ${{ needs.determine_targets.outputs.version }}"
            git push
          else
            if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
              echo "Force update requested. Committing anyway."
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git add package-managers/brew/Formula/${{ needs.determine_targets.outputs.package_name }}.rb
              git commit -m "Update Homebrew formula for ${{ needs.determine_targets.outputs.package_name }} to version ${{ needs.determine_targets.outputs.version }} (forced)"
              git push
            else
              echo "No changes to Homebrew formula, skipping commit"
            fi
          fi

  apt_update:
    needs: [determine_targets, pypi_publish]
    if: ${{ needs.determine_targets.outputs.publish_apt == 'true' && (always() || needs.pypi_publish.result == 'success' || needs.pypi_publish.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.11"
          cache-key-prefix: "apt-env"

      - name: Parse steps
        id: parse_steps
        shell: bash
        run: |
          STEPS="${{ github.event.inputs.steps }}"
          if [[ -z "$STEPS" ]]; then
            STEPS="build,verify,commit"
          fi
          
          if [[ "$STEPS" == *"build"* ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
          else
            echo "run_build=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$STEPS" == *"verify"* ]]; then
            echo "run_verify=true" >> $GITHUB_OUTPUT
          else
            echo "run_verify=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$STEPS" == *"commit"* ]]; then
            echo "run_commit=true" >> $GITHUB_OUTPUT
          else
            echo "run_commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Debian packaging tools
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts debhelper dh-python

      - name: Build APT package
        if: ${{ steps.parse_steps.outputs.run_build == 'true' }}
        shell: bash
        run: |
          # Install the package from PyPI
          pip install ${{ needs.determine_targets.outputs.package_name }}==${{ needs.determine_targets.outputs.version }}
          
          # Generate the Debian package
          python package-managers/debian/pypi-to-apt ${{ needs.determine_targets.outputs.package_name }}
          
          # Show the generated package info
          ls -la package-managers/debian/${{ needs.determine_targets.outputs.package_name }}-${{ needs.determine_targets.outputs.version }}/

      - name: Verify APT package
        if: ${{ steps.parse_steps.outputs.run_verify == 'true' }}
        shell: bash
        run: |
          # Test the package
          bash package-managers/debian/test-apt-package.sh ${{ needs.determine_targets.outputs.package_name }}

      - name: Commit APT package
        if: ${{ steps.parse_steps.outputs.run_commit == 'true' }}
        shell: bash
        run: |
          # Check if there are changes
          if ! git diff --quiet package-managers/debian/${{ needs.determine_targets.outputs.package_name }}-${{ needs.determine_targets.outputs.version }}/; then
            # Commit the changes
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add package-managers/debian/${{ needs.determine_targets.outputs.package_name }}-${{ needs.determine_targets.outputs.version }}/
            git commit -m "Update APT package for ${{ needs.determine_targets.outputs.package_name }} to version ${{ needs.determine_targets.outputs.version }}"
            git push
          else
            if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
              echo "Force update requested. Committing anyway."
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git add package-managers/debian/${{ needs.determine_targets.outputs.package_name }}-${{ needs.determine_targets.outputs.version }}/
              git commit -m "Update APT package for ${{ needs.determine_targets.outputs.package_name }} to version ${{ needs.determine_targets.outputs.version }} (forced)"
              git push
            else
              echo "No changes to APT package, skipping commit"
            fi
          fi

  # Add a dedicated job for GitHub releases
  github_release:
    needs: [determine_targets, pypi_publish]
    if: ${{ needs.determine_targets.outputs.publish_github == 'true' && (always() || needs.pypi_publish.result == 'success' || needs.pypi_publish.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT || github.token }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.11"
          cache-key-prefix: "github-env"

      - name: Build package
        shell: bash
        run: |
          # Only build if we don't have a PyPI job or it was skipped
          if [[ "${{ needs.pypi_publish.result }}" != "success" ]]; then
            poetry build
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ needs.determine_targets.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: ${{ inputs.release_notes == '' }}
          body: ${{ inputs.release_notes }}
          prerelease: false
          name: "Release v${{ needs.determine_targets.outputs.version }}" 