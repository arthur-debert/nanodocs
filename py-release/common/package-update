#!/bin/bash
# Script to trigger a package update (Homebrew or APT) using GitHub Actions

set -e

# Default values
NON_INTERACTIVE=false
PACKAGE_SYSTEM=""
FORCE_UPDATE_FLAG="false"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  --non-interactive)
    NON_INTERACTIVE=true
    shift
    ;;
  --force)
    FORCE_UPDATE_FLAG="true"
    shift
    ;;
  brew | apt)
    PACKAGE_SYSTEM="$1"
    shift
    ;;
  *)
    # Unknown option
    shift
    ;;
  esac
done

# Ensure we're in the project root
cd "$(dirname "$0")/.."

# Check if gh CLI is installed
if ! command -v gh &>/dev/null; then
  echo "Error: GitHub CLI (gh) is not installed."
  echo "Please install it from https://cli.github.com/"
  exit 1
fi

# Check if user is authenticated with GitHub
if ! gh auth status &>/dev/null; then
  echo "Error: You are not authenticated with GitHub CLI."
  echo "Please run 'gh auth login' first."
  exit 1
fi

# Get the current branch
CURRENT_BRANCH=$(git branch --show-current)
if [[ -z ${CURRENT_BRANCH} ]]; then
  echo "Error: Could not determine current branch."
  exit 1
fi

# Get the default branch (usually main or master)
DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs)
if [[ -z ${DEFAULT_BRANCH} ]]; then
  DEFAULT_BRANCH="main" # Fallback to main if we can't determine the default branch
fi

# Check if the current branch exists in the remote repository
if ! git ls-remote --heads origin ${CURRENT_BRANCH} | grep -q ${CURRENT_BRANCH}; then
  echo "Warning: Branch '${CURRENT_BRANCH}' does not exist in the remote repository."

  if [[ ${NON_INTERACTIVE} == true ]]; then
    # In non-interactive mode, use default branch
    echo "Using default branch '${DEFAULT_BRANCH}' instead."
    BRANCH_TO_USE=${DEFAULT_BRANCH}
  else
    echo "Options:"
    echo "1. Use default branch '${DEFAULT_BRANCH}' instead"
    echo "2. Push current branch to remote and continue"
    echo "3. Cancel"
    read -r -p "Choose an option (1-3): " BRANCH_OPTION

    case ${BRANCH_OPTION} in
    1)
      echo "Using default branch '${DEFAULT_BRANCH}' instead."
      BRANCH_TO_USE=${DEFAULT_BRANCH}
      ;;
    2)
      echo "Pushing current branch '${CURRENT_BRANCH}' to remote..."
      git push -u origin ${CURRENT_BRANCH}
      BRANCH_TO_USE=${CURRENT_BRANCH}
      ;;
    *)
      echo "Update cancelled."
      exit 0
      ;;
    esac
  fi
else
  BRANCH_TO_USE=${CURRENT_BRANCH}
fi

# Get the current version from pyproject.toml
VERSION=$(poetry version -s)
if [[ -z ${VERSION} ]]; then
  echo "Error: Could not determine current version from pyproject.toml."
  exit 1
fi

# Default package name - use environment variable if available
PACKAGE_NAME="${PACKAGE_NAME:-nanodoc}"

# Determine which package system to update
if [[ -z ${PACKAGE_SYSTEM} ]]; then
  if [[ ${NON_INTERACTIVE} == true ]]; then
    echo "Error: Package system (brew or apt) must be specified in non-interactive mode."
    exit 1
  else
    echo "Which package system would you like to update?"
    echo "1. Homebrew (brew)"
    echo "2. Debian/Ubuntu (apt)"
    read -r -p "Choose an option (1-2): " PACKAGE_OPTION

    case ${PACKAGE_OPTION} in
    1)
      PACKAGE_SYSTEM="brew"
      ;;
    2)
      PACKAGE_SYSTEM="apt"
      ;;
    *)
      echo "Invalid option. Exiting."
      exit 1
      ;;
    esac
  fi
fi

# Set workflow name based on package system
if [[ ${PACKAGE_SYSTEM} == "brew" ]]; then
  WORKFLOW_NAME="Update Homebrew Formula"
  PACKAGE_TYPE="Homebrew formula"
else
  WORKFLOW_NAME="Update APT Package"
  PACKAGE_TYPE="APT package"
fi

echo "Current version: ${VERSION}"
echo "Branch to use: ${BRANCH_TO_USE}"
echo "This will trigger a ${PACKAGE_TYPE} update for ${PACKAGE_NAME} version ${VERSION} from branch ${BRANCH_TO_USE}."

if [[ ${NON_INTERACTIVE} == false ]]; then
  read -r -p "Continue? (y/n): " CONFIRM

  if [[ ${CONFIRM} != "y" && ${CONFIRM} != "Y" ]]; then
    echo "Update cancelled."
    exit 0
  fi

  # Ask if user wants to force update
  read -r -p "Force update even if no changes detected? (y/n): " FORCE_UPDATE
  if [[ ${FORCE_UPDATE} == "y" || ${FORCE_UPDATE} == "Y" ]]; then
    FORCE_UPDATE_FLAG="true"
  fi
fi

# Trigger the workflow
echo "Triggering ${PACKAGE_TYPE} update workflow..."
gh workflow run "${WORKFLOW_NAME}" --ref "${BRANCH_TO_USE}" --field force_update=${FORCE_UPDATE_FLAG} --field package_name=${PACKAGE_NAME}
echo ""

if [[ ${NON_INTERACTIVE} == false ]]; then
  # Wait a moment for the workflow to be registered
  echo "Waiting for workflow to start..."
  sleep 2

  # Get the run ID of the latest workflow
  RUN_ID=$(gh run list --workflow="${WORKFLOW_NAME}" --limit 1 --json databaseId --jq '.[0].databaseId')

  # Display the status of the workflow run
  echo "Latest workflow run status:"
  echo ""
  gh run list --workflow="${WORKFLOW_NAME}" --limit 1

  if [[ -n ${RUN_ID} ]]; then
    echo ""
    echo "You can check the detailed status with:"
    echo "gh run view ${RUN_ID} (after this script completes)"
    echo ""
    echo "Watching workflow progress in real-time..."
    gh run watch "${RUN_ID}"
  fi
fi
