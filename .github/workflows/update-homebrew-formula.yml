name: Update Homebrew Formula

on:
  # Respond to custom repository-dispatch event from PyPI publish workflow
  repository_dispatch:
    types: [pypi-published]
  # Trigger after a GitHub Release is published
  release:
    types: [published]
  # Keep the workflow_run trigger as a backup
  workflow_run:
    workflows: ["Publish to PyPI"]
    types:
      - completed
    branches:
      - "**" # This will match all branches
  # Add manual trigger option for testing
  workflow_dispatch:
    inputs:
      force_update:
        description: "Force update even if no changes detected"
        required: false
        type: boolean
        default: false
      package_name:
        description: "Package name (default: nanodoc)"
        required: false
        type: string
        default: "nanodoc"
      steps:
        description: "Steps to run (comma-separated: build,verify,commit)"
        required: false
        type: string
        default: "build,verify,commit"

permissions:
  contents: write

jobs:
  update-formula:
    runs-on: ubuntu-latest
    # Only run if triggered by workflow_run and that workflow was successful
    if: ${{ github.event_name != 'workflow_run' ||
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Fetch all history and branches for proper versioning
          fetch-depth: 0
          # Use the branch from the repository-dispatch event if available, otherwise use the current ref
          ref: ${{ github.event.client_payload.branch || github.ref }}
          # Use PAT for better permissions
          token: ${{ secrets.PAT }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.11"
          cache-key-prefix: "brew-formula-env"

      - name: Get package version
        id: get_version
        shell: bash
        run: |
          version=$(poetry version -s)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Parse steps
        id: parse_steps
        shell: bash
        run: |
          # Default to all steps if not specified
          STEPS="${{ github.event.inputs.steps || 'build,verify,commit' }}"

          # Check if each step is included
          if [[ $STEPS == *"build"* ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
          else
            echo "run_build=false" >> $GITHUB_OUTPUT
          fi

          if [[ $STEPS == *"verify"* ]]; then
            echo "run_verify=true" >> $GITHUB_OUTPUT
          else
            echo "run_verify=false" >> $GITHUB_OUTPUT
          fi

          if [[ $STEPS == *"commit"* ]]; then
            echo "run_commit=true" >> $GITHUB_OUTPUT
          else
            echo "run_commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Homebrew formula
        if: steps.parse_steps.outputs.run_build == 'true'
        id: generate_formula
        shell: bash
        run: |
          # Get package name from input or default to nanodoc
          PACKAGE_NAME="${{ github.event.inputs.package_name || 'nanodoc' }}"
          echo "Generating formula for package: $PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Install jinja2 for the pypi-to-brew script
          pip install jinja2

          # Make scripts executable
          chmod +x package-managers/brew/pypi-to-brew

          # Run the update script
          package-managers/brew/pypi-to-brew "$PACKAGE_NAME"

      - name: Test Homebrew formula
        if: steps.parse_steps.outputs.run_verify == 'true' && steps.parse_steps.outputs.run_build == 'true'
        shell: bash
        run: |
          # Get package name from previous step
          PACKAGE_NAME="${{ steps.generate_formula.outputs.package_name }}"
          echo "Running comprehensive tests for Homebrew formula: $PACKAGE_NAME"

          # Make the test script executable
          chmod +x package-managers/brew/test-brew-formula.sh

          # Run the test script
          package-managers/brew/test-brew-formula.sh "$PACKAGE_NAME"

          if [ $? -ne 0 ]; then
            echo "❌ Formula tests failed. Not proceeding with commit."
            exit 1
          fi

          echo "✅ Formula tests completed successfully. Proceeding with commit."

      - name: Commit and push changes
        if: steps.parse_steps.outputs.run_commit == 'true'
        shell: bash
        run: |
          # Get package name from previous step or input
          PACKAGE_NAME="${{ steps.generate_formula.outputs.package_name || github.event.inputs.package_name || 'nanodoc' }}"
          echo "Using package name: $PACKAGE_NAME"

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Get current branch name
          BRANCH_NAME=$(git symbolic-ref --short HEAD)
          echo "Current branch: $BRANCH_NAME"

          # If we're on a detached HEAD (which can happen with repository_dispatch),
          # use the branch name from the event payload or default to main
          if [ "$BRANCH_NAME" = "HEAD" ]; then
            if [ -n "${{ github.event.client_payload.branch }}" ]; then
              BRANCH_NAME="${{ github.event.client_payload.branch }}"
            else
              BRANCH_NAME="main"
            fi
            echo "Using branch from payload or default: $BRANCH_NAME"
            git checkout -B $BRANCH_NAME
          fi

          # Check if there are changes to commit
          if git diff --quiet package-managers/brew/Formula/$PACKAGE_NAME.rb; then
            if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
              echo "No changes detected, but force_update is true. Proceeding with commit."
            else
              echo "No changes to the formula, skipping commit"
              exit 0
            fi
          fi

          git add package-managers/brew/Formula/$PACKAGE_NAME.rb
          git commit -m "Update Homebrew formula for $PACKAGE_NAME to version ${{ steps.get_version.outputs.version }}"
          git push origin $BRANCH_NAME
