name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      from_pyproject:
        description: "Use version from pyproject.toml"
        required: true
        type: boolean
        default: true
      release_version:
        description: "Or tag name for the release"
        required: false

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry # Reference your composite action
        with:
          python-version: "3.11" # Specify the Python version you want to use
          cache-key-prefix: "test-env"

      - name: Determine version
        id: determine_version
        shell: bash
        run: |
          if [ "${{ github.event.inputs.from_pyproject }}" = true ]; then
            release_version=$(poetry version -s)
            echo "Using version from pyproject.toml: $release_version"
          else
            if [ -z "${{ github.event.inputs.release_version }}" ]; then
              echo "Error: No release version provided and not using pyproject.toml version."
              exit 1
            fi
            release_version=${{ github.event.inputs.release_version }}
            echo "Using provided release version: $release_version"
          fi
          echo "release_version=$release_version" >> $GITHUB_OUTPUT

      - name: Update version
        shell: bash
        run: |
          poetry version ${{ steps.determine_version.outputs.release_version }}

      - name: Build
        shell: bash
        run: |
          poetry build

      - name: Publish
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          poetry run twine upload --repository pypi dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ steps.determine_version.outputs.release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          prerelease: false
          name:
            "Release v${{ steps.determine_version.outputs.release_version }}"

      - name: Trigger Homebrew Formula Update
        uses: peter-evans/repository-dispatch@v2
        with:
          # Note: This requires a personal access token with repo scope
          # You need to create this token and add it as a repository secret
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: pypi-published
          client-payload:
            '{"version": "${{ steps.determine_version.outputs.release_version
            }}"}'
